<?php
include "class_xml2array.php";
include "ttprosoap.php";
class ttpro {

	private static $time_out = 3600; // 3600 seconds or 1 hour
	private static $time_tag_fname = "/main/stage/wiki/testlab/cache/timetag_newmodified.txt";
	private static $queried_fname = "/main/stage/wiki/testlab/cache/result_newmodified.txt";
	private static $log_fname = "/main/stage/wiki/testlab/user.log";
	private static $login_fname = "/main/stage/wiki/testlab/user_log/";

	public static function log_user() {
		if ($_COOKIE["db_mediawikiUserName"] == "Arnoldh" ) { return;}
		$date_tag = strftime("%b %d %Y, %X %Z ", time());
		$log_msg = $date_tag . "UserName: [" . $_COOKIE["db_mediawikiUserName"];
		$log_msg .= "], REMOTE_ADDR: [" . $_SERVER["REMOTE_ADDR"];
		$log_msg .= "], SERVER_ADDR: [" . $_SERVER["SERVER_ADDR"];
		$log_msg .= "], SCRIPT: [" . $_SERVER["SCRIPT_NAME"] . "]\n";
		$abc = file_put_contents(self::$log_fname , $log_msg , FILE_APPEND);
	}

	public static function check_file($elapse_sec) {
//////////////////////  Following to determine read from file or query from TTPro for $detail_arr

		$de_arr = array();
		if ( is_file (self::$time_tag_fname) ) {
			$last_timetag = floatval(file_get_contents(self::$time_tag_fname) );
		} else {
			$last_timetag = 0;
		}
		$current_timetag = gettimeofday(true);

		if ( ($current_timetag - $last_timetag) < $elapse_sec) {
			if ( is_file(self::$queried_fname) ) {
				$detail_str = file_get_contents(self::$queried_fname);
				$de_arr = json_decode($detail_str);
			}
		}
		return $de_arr;
////////////////////// //////////////////////  //////////////////////  //////////////////////  
	}

	public static function save_file($arr)
	{
		$current_timetag = gettimeofday(true);

		file_put_contents(self::$time_tag_fname , strval($current_timetag) );

		$arr_str = json_encode($arr);
		file_put_contents(self::$queried_fname , $arr_str);
	}
	public static function recent_modified($period) {

		$detail_arr = ttpro::check_file(self::$time_out); 

		if (count($detail_arr) == 0) {
			$detail_arr = self::query_ttpro('Newly Modified '. substr($period,0,1));
		}
		return $detail_arr;
	}

	public static function release() {
		self::log_user();
		$cookie = database_login('Software_development');
		$rlist = record_release($cookie);
		//	echo "<br><br>Record List ====<br><br>" . $rlist . "<br><br>";
		database_logoff($cookie);

		$regex="/<ttns:getRecordListForTableResponse>(.*)<\/ttns:getRecordListForTableResponse>/";
		$item = "";
		if (preg_match_all($regex, $rlist, $matches_out)) {
			$item = $matches_out[1][0];
		} else {
			echo "<br>" . $rlist . "<br>";
		}

		$arr = XML2Array::createArray($item);
		return $arr;
	}

	public static function newfound_eng($filter) {
		self::log_user();
		$cookie = database_login('Software_development');
		$rlist = record_newfound_eng($cookie, $filter);
		database_logoff($cookie);

		$regex="/<ttns:getRecordListForTableResponse>(.*)<\/ttns:getRecordListForTableResponse>/";
		$item = "";
		if (preg_match_all($regex, $rlist, $matches_out)) {
			$item = $matches_out[1][0];
		} else {
			echo "<br>" . $rlist . "<br>";
		}

		$arr = XML2Array::createArray($item);
		return $arr;
	}

	public static function newfound($filter) {
		self::log_user();
		$cookie = database_login('Software_development');
		$rlist = record_newfound($cookie, $filter);
		database_logoff($cookie);

		$regex="/<ttns:getRecordListForTableResponse>(.*)<\/ttns:getRecordListForTableResponse>/";
		$item = "";
		if (preg_match_all($regex, $rlist, $matches_out)) {
			$item = $matches_out[1][0];
		} else {
			echo "<br>" . $rlist . "<br>";
		}

		$arr = XML2Array::createArray($item);
		return $arr;
	}


	public static function query_ttpro_ref($filter)	{
		self::log_user();
		$cookie = database_login('Software_development');
		//$rlist = record_newfound_4ref($cookie, $filter);
		$rlist = record_newfound_eng($cookie, $filter);
		//	echo "<br><br>Record List ====<br><br>" . $rlist . "<br><br>";
		database_logoff($cookie);
	
		$regex="/<ttns:getRecordListForTableResponse>(.*)<\/ttns:getRecordListForTableResponse>/";
		$item = "";
		if (preg_match_all($regex, $rlist, $matches_out)) {
			$item = $matches_out[1][0];
		} else {
			echo "<br>" . $rlist . "<br>";
		}


		$arr = XML2Array::createArray($item);

		return $arr;
	}
	public static function query_ttpro($filter)	{
		$cookie = database_login('Software_development');
		//	$clist = column_list($cookie);
		//	echo "<br><br>Column List ====<br><br>" . $clist . "<br><br>";
		//	$rlist = record_query($cookie, '{"Date Modified":"8/14/2015 at 6:31 AM"}');
		$rlist = record_newmodified($cookie, $filter);
		//	echo "<br><br>Record List ====<br><br>" . $rlist . "<br><br>";
	
		$regex="/<ttns:getRecordListForTableResponse>(.*)<\/ttns:getRecordListForTableResponse>/";
		$item = "";
		if (preg_match_all($regex, $rlist, $matches_out)) {
			$item = $matches_out[1][0];
		} else {
			echo "<br>" . $rlist . "<br>";
		}


		$arr = XML2Array::createArray($item);

		return $arr;

// 2016/12/19 arnold
// Following code is redundant to get details of each ticket.
// Then save to a local file(to web server, but can save time link to database server next time)
// However, the connect from web client is highly possible to be disconnected

		$number_pos = -1;
		foreach ($arr['recordlist']['columnlist']['item'] as $scan_pos => $varr) {
			if ($varr['name']  == 'Number') {
				$number_pos = $scan_pos;
				break;
			}
		}

		$count = 0;
		$de_arr = array();
		$reported_fields = array( 'foundby' , 'datefound' );
		$event_fields = array( 'user' , 'date' , 'eventaddorder' , 'name' , 'resultingstate' , 'assigntolist' );
		if ($number_pos >= 0) {
			$partial_arr = $arr['recordlist']['records']['item'];
			foreach ($partial_arr as $row_arr) {
				$defect_no = $row_arr['row']['item'][$number_pos]['value'];
	
				$rlist = getDefect($cookie, $defect_no);
	
				$regex="/<ttns:getDefectResponse>(.*)<\/ttns:getDefectResponse>/";
				$item = "";
				$message_str = "";
				if (preg_match_all($regex, $rlist, $matches_out)) {
					$item = $matches_out[1][0];
					$defect_arr = XML2Array::createArray($item);
					$arr1 = array();
					$arr2 = array();
					foreach ( $reported_fields as $field ) {
						$arr1[$field] = $defect_arr['pDefect']['reportedbylist']['item'][$field];
					}
					foreach ( $event_fields as $field) {
						$arr2[$field] = $defect_arr['pDefect']['eventlist']['item'][$field];
					}
					$tmp_arr = array('defectnumber' => $defect_arr['pDefect']['defectnumber'] , 
							'reportedbylist' => $defect_arr['pDefect']['reportedbylist'], 
							'eventlist' => $defect_arr['pDefect']['eventlist'] );
					$de_arr[$count] = $tmp_arr;
					$count++;
				} else {
					$regex="/<faultstring>(.*)<\/faultstring>/";
					if (preg_match_all($regex, $rlist, $matches_out)) {
						$item = $matches_out[1][0];
						echo "<br>" . "<u>The maximum ticket number might be reached." . "</u><br>";
						if (strcmp("The specified record does not exist in the database." , $item) == 0) {
							$message_str = "Following is the error message from TTPro Server:";
						} else {
							$message_str = "Following is the error message from TTPro Server. Please copy and send to arnold.ho@silvaco.com";
						}
						echo "<br>" . $message_str . "<br>";
						echo "<br>" . $item . "<br>";
					} else {
						echo "<br>" . "Copy the string and send to arnold.ho@silvaco.com" . "<br>";
						echo "<br>" . $rlist . "<br>";
					}
				}
			}
		}
		database_logoff($cookie);
		$arr['detail'] = $de_arr;
		self::save_file($arr);
	
		return $arr;
	}
}
?>
