<?php
//ini_set('display_errors', 1);
//ini_set('display_startup_errors', 1);
//error_reporting(E_ALL);
$date_tag = strftime("%b %d %Y, %X %Z ", time());
$log_msg = $date_tag . "UserName: [" . $_COOKIE["db_mediawikiUserName"] . "], REMOTE_ADDR: [" . $_SERVER["REMOTE_ADDR"] . "], SCRIPT: [" . $_SERVER["SCRIPT_NAME"] ."]\n";
file_put_contents("/main/stage/wiki/testlab/user.log" , $log_msg , FILE_APPEND);

// lib_ver.log is generated by "ls -ld /main/silvaco/lib/*/*"
$libver = file_get_contents("/main/stage/wiki/ia/working_log/lib_ver.log");
// basever_unify.log is generated by "/main/stage/wiki/ia/pack_perl/basever_unify.pl > basever_unify.log"
$bver = file_get_contents("/main/stage/wiki/ia/working_log/basever_unify.log");


$arr = array();
$arr["libls"] = parse_libs($libver);

$arr["basever"] = parse_base($bver);
echo json_encode($arr);

function parse_base($base)
{
	$lines = explode("\n" , $base);
	$base_array = array();
	foreach ($lines as $line1) {
		$p1 = strpos($line1 , ",");
		if (! $p1) {continue; }
		$id = substr($line1 , 0, $p1);
		$p2 = strpos($line1 , ",", 1+$p1);
		if (! $p2) {continue; }
		$pn = substr($line1 , 1+$p1, $p2 - $p1 - 1);
		$libxx = substr($line1, 1+$p2);
		$libxx_s = explode("]," , $libxx);
		$lib_in_baseline = array();
		$libn_uniq = array();
		foreach ($libxx_s as $v1) {
			$p3 = strpos($v1 , ",");
			$libn = substr($v1 , 1 , $p3 - 1);
			if (array_key_exists($libn,$libn_uniq)) {
				continue;
			} else {
				$libn_uniq[$libn]=1;
			}
			$libv = substr($v1 , $p3 + 1);
			if (strcmp(substr($libv, -1), "]") == 0) {
				$libv = substr($libv,0 , strlen($libv)-1);
			}
			$lib1 = array(
				"libn"	=> $libn,
				"libv"	=> $libv
			);
			array_push($lib_in_baseline , $lib1);
		}
		$base1 = array(
			"id"	=> $id,
			"packname"	=> $pn,
			"libs"	=> $lib_in_baseline
		);
		array_push($base_array , $base1);
	}
	return $base_array;
}
function parse_libs($libver)
{
	$lines = explode("\n" , $libver);

	$libs = array();
	$error = 0;
	$checked = 0;

//echo "line of lib list " . count($lines) . "<br>";
	foreach ( $lines as $line1 ) {
		$fields = parse_line($line1);
		if ($fields['libv'] != "NA") {
			array_push($libs , $fields);
		}
	}
	return $libs;
}

function parse_line($line1)
{
	$fvar = preg_split('/ +/',$line1);
	$size = count($fvar);
//echo $line1 . " has fields " . $size . "<br>";

	$rec0 = array (
		'date'	=> "",
		'libn'	=> "",
		'libv'	=> "NA"
	);
	if ($size != 9) {
		return $rec0;
	}
	if (strlen($fvar[7]) > 4) {
		$thisyear = date("Y");
		$d_str = $fvar[5] . ' ' . $fvar[6] . ', ' . $thisyear;
	} else {
		$d_str = $fvar[5] . ' ' . $fvar[6] . ', ' . $fvar[7];
	}
	$path_array = explode("/" ,$fvar[8]);
	$lib_scan = -1;
	$libn = "yyyyyyyy";
	foreach ($path_array as $p1) {
		if ($lib_scan == 1) {
			$libv = $p1;
			$lib_scan = -1;
		}
		if ($lib_scan == 0) {
			if (strcmp($libn, "yyyyyyyy") == 0) {
				$libn = $p1;
			}
			$lib_scan = 1;
		}
		if ( strcmp($p1, 'lib') == 0) {
			$lib_scan++;
		}
	}
	
	
	
	if ( strcmp(substr($libv, 0, 2) , 'ba') == 0) {
		return $rec0;
	}

	$rec = array (
		'date'	=> $d_str,
		'libn'	=> $libn,
		'libv'	=> $libv
	);

	return $rec;
}
?>
